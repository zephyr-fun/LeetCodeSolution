// 2023.10.10
class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;

    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = initial.size();
        parent.resize(n);
        rank.resize(n, 0);
        size.resize(n, 1);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j]) {
                    int pu = find(i);
                    int pv = find(j);
                    if (pu != pv) {
                        if (rank[pu] < rank[pv]) {
                            parent[pu] = pv;
                            size[pv] += size[pu];
                        }
                        else if (rank[pv] < rank[pu]) {
                            parent[pv] = pu;
                            size[pu] += size[pv];
                        }
                        else {
                            parent[pv] = pu;
                            size[pu] += size[pv];
                            rank[pu]++;
                        }
                    }
                }
            }
        }
        vector<int> tot(n, 0);
        for (int i = 0; i < m; i++) {
            tot[find(initial[i])]++;
        }
        int res = -1;
        int val = -1;
        for (int i = 0; i < m; i++) {
            int cur = 0;
            int pu = find(initial[i]);
            if (tot[pu] == 1) {
                cur = size[pu];
            }
            if (cur > val) {
                res = initial[i];
                val = cur;
            }
            else if (cur == val && res > initial[i]) {
                res = initial[i];
            }
        }
        return res;
    }
};